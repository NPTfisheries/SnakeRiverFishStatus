model {

# Priors for detection probabilities 

	 ACM_D_p ~ dbeta(1, 1);
	 ACM_U_p ~ dbeta(1, 1);
	 ACB_D_p ~ dbeta(1, 1);
	 ACB_U_p ~ dbeta(1, 1);
	 AFC_D_p ~ dbeta(1, 1);
	 AFC_U_p ~ dbeta(1, 1);
	 CCA_D_p ~ dbeta(1, 1);
	 CCA_U_p ~ dbeta(1, 1);
	 ALPOWC_p ~ dbeta(1, 1);
	 BED_D_p ~ dbeta(1, 1);
	 BED_U_p ~ dbeta(1, 1);
	 BRC_p ~ dbeta(1, 1);
	 CLC_D_p ~ dbeta(1, 1);
	 CLC_U_p ~ dbeta(1, 1);
	 COC_D_p ~ dbeta(1, 1);
	 COC_U_p ~ dbeta(1, 1);
	 CRC_D_p ~ dbeta(1, 1);
	 CRC_U_p ~ dbeta(1, 1);
	 GRS_p ~ dbeta(1, 1);
	 GOA_p ~ dbeta(1, 1);
	 LMA_p ~ dbeta(1, 1);
	 IHR_p ~ dbeta(1, 1);
	 MCN_p ~ dbeta(1, 1);
	 JD1_p ~ dbeta(1, 1);
	 JDA_p ~ dbeta(1, 1);
	 DRM_p ~ dbeta(1, 1);
	 TDA_p ~ dbeta(1, 1);
	 BON_p ~ dbeta(1, 1);
	 FID_p ~ dbeta(1, 1);
	 KLR_p ~ dbeta(1, 1);
	 LWL_p ~ dbeta(1, 1);
	 RCX_p ~ dbeta(1, 1);
	 WRA_p ~ dbeta(1, 1);
	 UMW_p ~ dbeta(1, 1);
	 PRA_p ~ dbeta(1, 1);
	 PRO_p ~ dbeta(1, 1);
	 WWB_p ~ dbeta(1, 1);
	 LTR_D_p ~ dbeta(1, 1);
	 LTR_U_p ~ dbeta(1, 1);
	 MTR_D_p ~ dbeta(1, 1);
	 MTR_U_p ~ dbeta(1, 1);
	 UTR_D_p ~ dbeta(1, 1);
	 UTR_U_p ~ dbeta(1, 1);
	 TFH_D_p ~ dbeta(1, 1);
	 TFH_U_p ~ dbeta(1, 1);
	 TPJ_D_p ~ dbeta(1, 1);
	 TPJ_U_p ~ dbeta(1, 1);
	 PWA_D_p ~ dbeta(1, 1);
	 PWA_U_p ~ dbeta(1, 1);
	 IR1_p ~ dbeta(1, 1);
	 IR2_p ~ dbeta(1, 1);
	 BSC_D_p ~ dbeta(1, 1);
	 BSC_U_p ~ dbeta(1, 1);
	 CMP_D_p ~ dbeta(1, 1);
	 CMP_U_p ~ dbeta(1, 1);
	 IR3_D_p ~ dbeta(1, 1);
	 IR3_U_p ~ dbeta(1, 1);
	 CZY_D_p ~ dbeta(1, 1);
	 CZY_U_p ~ dbeta(1, 1);
	 GCM_D_p ~ dbeta(1, 1);
	 GCM_U_p ~ dbeta(1, 1);
	 IR4_D_p ~ dbeta(1, 1);
	 IR4_U_p ~ dbeta(1, 1);
	 IML_D_p ~ dbeta(1, 1);
	 IML_U_p ~ dbeta(1, 1);
	 IR5_D_p ~ dbeta(1, 1);
	 IR5_U_p ~ dbeta(1, 1);
	 LSC_D_p ~ dbeta(1, 1);
	 LSC_U_p ~ dbeta(1, 1);
	 LSHEEF_p ~ dbeta(1, 1);
	 JA1_D_p ~ dbeta(1, 1);
	 JA1_U_p ~ dbeta(1, 1);
	 JOC_D_p ~ dbeta(1, 1);
	 JOC_U_p ~ dbeta(1, 1);
	 JUL_p ~ dbeta(1, 1);
	 HLM_D_p ~ dbeta(1, 1);
	 HLM_U_p ~ dbeta(1, 1);
	 EPR_D_p ~ dbeta(1, 1);
	 EPR_U_p ~ dbeta(1, 1);
	 KHS_D_p ~ dbeta(1, 1);
	 KHS_U_p ~ dbeta(1, 1);
	 BBA_D_p ~ dbeta(1, 1);
	 BBA_U_p ~ dbeta(1, 1);
	 PCM_D_p ~ dbeta(1, 1);
	 PCM_U_p ~ dbeta(1, 1);
	 LAP_D_p ~ dbeta(1, 1);
	 LAP_U_p ~ dbeta(1, 1);
	 MIS_D_p ~ dbeta(1, 1);
	 MIS_U_p ~ dbeta(1, 1);
	 SWT_D_p ~ dbeta(1, 1);
	 SWT_U_p ~ dbeta(1, 1);
	 WEB_D_p ~ dbeta(1, 1);
	 WEB_U_p ~ dbeta(1, 1);
	 LAW_D_p ~ dbeta(1, 1);
	 LAW_U_p ~ dbeta(1, 1);
	 LC1_p ~ dbeta(1, 1);
	 LC2_p ~ dbeta(1, 1);
	 LGW_D_p ~ dbeta(1, 1);
	 LGW_U_p ~ dbeta(1, 1);
	 LLR_D_p ~ dbeta(1, 1);
	 LLR_U_p ~ dbeta(1, 1);
	 EVL_D_p ~ dbeta(1, 1);
	 EVL_U_p ~ dbeta(1, 1);
	 BHC_D_p ~ dbeta(1, 1);
	 BHC_U_p ~ dbeta(1, 1);
	 EVU_D_p ~ dbeta(1, 1);
	 EVU_U_p ~ dbeta(1, 1);
	 AGC_D_p ~ dbeta(1, 1);
	 AGC_U_p ~ dbeta(1, 1);
	 KEN_D_p ~ dbeta(1, 1);
	 KEN_U_p ~ dbeta(1, 1);
	 HYC_D_p ~ dbeta(1, 1);
	 HYC_U_p ~ dbeta(1, 1);
	 LRW_D_p ~ dbeta(1, 1);
	 LRW_U_p ~ dbeta(1, 1);
	 BTL_D_p ~ dbeta(1, 1);
	 BTL_U_p ~ dbeta(1, 1);
	 BTM_D_p ~ dbeta(1, 1);
	 BTM_U_p ~ dbeta(1, 1);
	 BTU_D_p ~ dbeta(1, 1);
	 BTU_U_p ~ dbeta(1, 1);
	 CAC_D_p ~ dbeta(1, 1);
	 CAC_U_p ~ dbeta(1, 1);
	 HEC_D_p ~ dbeta(1, 1);
	 HEC_U_p ~ dbeta(1, 1);
	 LB8_D_p ~ dbeta(1, 1);
	 LB8_U_p ~ dbeta(1, 1);
	 LBS_D_p ~ dbeta(1, 1);
	 LBS_U_p ~ dbeta(1, 1);
	 LCL_D_p ~ dbeta(1, 1);
	 LCL_U_p ~ dbeta(1, 1);
	 LLS_D_p ~ dbeta(1, 1);
	 LLS_U_p ~ dbeta(1, 1);
	 WPC_D_p ~ dbeta(1, 1);
	 WPC_U_p ~ dbeta(1, 1);
	 LRL_p ~ dbeta(1, 1);
	 LRU_p ~ dbeta(1, 1);
	 MAR_D_p ~ dbeta(1, 1);
	 MAR_U_p ~ dbeta(1, 1);
	 NFS_D_p ~ dbeta(1, 1);
	 NFS_U_p ~ dbeta(1, 1);
	 PCA_D_p ~ dbeta(1, 1);
	 PCA_U_p ~ dbeta(1, 1);
	 RAPH_p ~ dbeta(1, 1);
	 SC1_p ~ dbeta(1, 1);
	 SC2_p ~ dbeta(1, 1);
	 SC3_p ~ dbeta(1, 1);
	 SC4_D_p ~ dbeta(1, 1);
	 SC4_U_p ~ dbeta(1, 1);
	 CRA_D_p ~ dbeta(1, 1);
	 CRA_U_p ~ dbeta(1, 1);
	 SFG_p ~ dbeta(1, 1);
	 ESS_D_p ~ dbeta(1, 1);
	 ESS_U_p ~ dbeta(1, 1);
	 JOHNSC_p ~ dbeta(1, 1);
	 YPP_D_p ~ dbeta(1, 1);
	 YPP_U_p ~ dbeta(1, 1);
	 KRS_D_p ~ dbeta(1, 1);
	 KRS_U_p ~ dbeta(1, 1);
	 SALSFW_p ~ dbeta(1, 1);
	 ZEN_D_p ~ dbeta(1, 1);
	 ZEN_U_p ~ dbeta(1, 1);
	 SIX_D_p ~ dbeta(1, 1);
	 SIX_U_p ~ dbeta(1, 1);
	 SW1_p ~ dbeta(1, 1);
	 SW2_p ~ dbeta(1, 1);
	 TAY_D_p ~ dbeta(1, 1);
	 TAY_U_p ~ dbeta(1, 1);
	 TENMC2_p ~ dbeta(1, 1);
	 UGR_p ~ dbeta(1, 1);
	 CCU_D_p ~ dbeta(1, 1);
	 CCU_U_p ~ dbeta(1, 1);
	 CCW_D_p ~ dbeta(1, 1);
	 CCW_U_p ~ dbeta(1, 1);
	 UGS_D_p ~ dbeta(1, 1);
	 UGS_U_p ~ dbeta(1, 1);
	 UG3_D_p ~ dbeta(1, 1);
	 UG3_U_p ~ dbeta(1, 1);
	 UG4_D_p ~ dbeta(1, 1);
	 UG4_U_p ~ dbeta(1, 1);
	 USE_p ~ dbeta(1, 1);
	 USI_p ~ dbeta(1, 1);
	 PAHH_p ~ dbeta(1, 1);
	 RFL_p ~ dbeta(1, 1);
	 SALEFT_p ~ dbeta(1, 1);
	 SAWT_p ~ dbeta(1, 1);
	 VC2_D_p ~ dbeta(1, 1);
	 VC2_U_p ~ dbeta(1, 1);
	 VC1_D_p ~ dbeta(1, 1);
	 VC1_U_p ~ dbeta(1, 1);
	 YFK_D_p ~ dbeta(1, 1);
	 YFK_U_p ~ dbeta(1, 1);
	 WB1_D_p ~ dbeta(1, 1);
	 WB1_U_p ~ dbeta(1, 1);
	 WEN_D_p ~ dbeta(1, 1);
	 WEN_U_p ~ dbeta(1, 1);
	 WR1_p ~ dbeta(1, 1);
	 BCANF_p ~ dbeta(1, 1);
	 MR1_D_p ~ dbeta(1, 1);
	 MR1_U_p ~ dbeta(1, 1);
	 WR2_D_p ~ dbeta(1, 1);
	 WR2_U_p ~ dbeta(1, 1);
	 LOSTIW_p ~ dbeta(1, 1);
	 WALH_p ~ dbeta(1, 1);

# Priors for transition probabilities 

	 # Set up time-varying movement probabilities for the initial branches
	 # i indexes the origin of fish (wild/hatchery)
	 # j indexes the branch
	 # t indexes the time strata (e.g. week)

	 # prior on log odds ratio for initial week 
	 for(i in 1:2) { 
		 for(j in 1:(n_branch_LGR - 1)) { 
		 # somewhat informative, but fairly vague prior 
			 lambda[i,j,1] ~ dnorm(-2, 1/16); 
			 exp_lambda[i,j,1] <- exp(lambda[i,j,1]) * LGR_dirch_vec[i,j];
		 }
		 # set black box as baseline 
		 for(t in 1:(n_strata)) { 
			 lambda[i,n_branch_LGR, t] <- 0; 
			 exp_lambda[i,n_branch_LGR, t] <- exp(lambda[i,n_branch_LGR, t]) * LGR_dirch_vec[i,n_branch_LGR]; 
			 # get sum of all lambda's 
			 sum_exp_lambda[i,t] <- sum(exp_lambda[i,,t]); 
		 }
	 }

	 # extract initial movement probabilities for week 1 
	 for(i in 1:2) { 
		 for(j in 1:n_branch_LGR) { 
			 psi_LGR[i,j,1] <- ifelse(LGR_dirch_vec[i,j] == 0, 0, exp_lambda[i,j,1] / sum_exp_lambda[i,1]); 
		 }
	 }
	 # variation in time-varying random walk movement probabilities 
	 sigma_rw ~ dunif(0,10); 
	 tau_rw <- pow(sigma_rw, -2); 

	 for(i in 1:2) { 
		 for(t in 2:(n_strata)) { 
			 for(j in 1:(n_branch_LGR - 1)) { 
				 epsilon[i,j,t] ~ dnorm(0, tau_rw); 
				 # set lambda to any main bin that saw NO fish to 0 
				 lambda[i,j,t] <- ifelse(LGR_dirch_vec[i,j] == 0, 0, lambda[i,j,t - 1] + epsilon[i,j,t]); 
				 exp_lambda[i,j,t] <- exp(lambda[i,j,t]) * LGR_dirch_vec[i,j]; 
			 }
			 for (j in 1:(n_branch_LGR)) { 
				 psi_LGR[i,j,t] <- (exp_lambda[i,j,t] / sum_exp_lambda[i,t]); 
			 }
		 }
	 }

	 for(t in 1:n_strata) { 
		 omega_LGR[1, 1:n_branch_LGR, t] <- zero_vec[1:(n_branch_LGR)]; 
		 omega_LGR[1, (n_branch_LGR + 1), t] <- 1; 

		 omega_LGR[2, 1:n_branch_LGR, t] <- psi_LGR[1,,t]; 
		 omega_LGR[2, (n_branch_LGR + 1), t] <- 0; 

		 omega_LGR[3, 1:n_branch_LGR, t] <- psi_LGR[2,,t]; 
		 omega_LGR[3, (n_branch_LGR + 1), t] <- 0; 
	 }


	 phi_USE[1] ~ dbeta(1, 1); 
	 phi_USE[2] ~ dbeta(1, 1); 

	 psi_USI[1, 1:n_branch_USI] ~ ddirch(USI_dirch_vec[1,]); 
	 psi_USI[2, 1:n_branch_USI] ~ ddirch(USI_dirch_vec[2,]); 

	 omega_USI[1, 1:n_branch_USI] <- zero_vec[1:(n_branch_USI)]; 
	 omega_USI[1, (n_branch_USI + 1)] <- 1; 

	 omega_USI[2, 1:n_branch_USI] <- psi_USI[1,]; 
	 omega_USI[2, (n_branch_USI + 1)] <- 0; 

	 omega_USI[3, 1:n_branch_USI] <- psi_USI[2,]; 
	 omega_USI[3, (n_branch_USI + 1)] <- 0; 

	 phi_SW1[1] ~ dbeta(1, 1); 
	 phi_SW1[2] ~ dbeta(1, 1); 

	 phi_LRL[1] ~ dbeta(1, 1); 
	 phi_LRL[2] ~ dbeta(1, 1); 

	 phi_SC1[1] ~ dbeta(1, 1); 
	 phi_SC1[2] ~ dbeta(1, 1); 

	 phi_SC2[1] ~ dbeta(1, 1); 
	 phi_SC2[2] ~ dbeta(1, 1); 

	 psi_SFG[1, 1:n_branch_SFG] ~ ddirch(SFG_dirch_vec[1,]); 
	 psi_SFG[2, 1:n_branch_SFG] ~ ddirch(SFG_dirch_vec[2,]); 

	 omega_SFG[1, 1:n_branch_SFG] <- zero_vec[1:(n_branch_SFG)]; 
	 omega_SFG[1, (n_branch_SFG + 1)] <- 1; 

	 omega_SFG[2, 1:n_branch_SFG] <- psi_SFG[1,]; 
	 omega_SFG[2, (n_branch_SFG + 1)] <- 0; 

	 omega_SFG[3, 1:n_branch_SFG] <- psi_SFG[2,]; 
	 omega_SFG[3, (n_branch_SFG + 1)] <- 0; 

	 phi_LLR[1] ~ dbeta(1, 1); 
	 phi_LLR[2] ~ dbeta(1, 1); 

	 phi_IR1[1] ~ dbeta(1, 1); 
	 phi_IR1[2] ~ dbeta(1, 1); 

	 psi_IR2[1, 1:n_branch_IR2] ~ ddirch(IR2_dirch_vec[1,]); 
	 psi_IR2[2, 1:n_branch_IR2] ~ ddirch(IR2_dirch_vec[2,]); 

	 omega_IR2[1, 1:n_branch_IR2] <- zero_vec[1:(n_branch_IR2)]; 
	 omega_IR2[1, (n_branch_IR2 + 1)] <- 1; 

	 omega_IR2[2, 1:n_branch_IR2] <- psi_IR2[1,]; 
	 omega_IR2[2, (n_branch_IR2 + 1)] <- 0; 

	 omega_IR2[3, 1:n_branch_IR2] <- psi_IR2[2,]; 
	 omega_IR2[3, (n_branch_IR2 + 1)] <- 0; 

	 phi_SC3[1] ~ dbeta(1, 1); 
	 phi_SC3[2] ~ dbeta(1, 1); 

	 psi_EVL[1, 1:n_branch_EVL] ~ ddirch(EVL_dirch_vec[1,]); 
	 psi_EVL[2, 1:n_branch_EVL] ~ ddirch(EVL_dirch_vec[2,]); 

	 omega_EVL[1, 1:n_branch_EVL] <- zero_vec[1:(n_branch_EVL)]; 
	 omega_EVL[1, (n_branch_EVL + 1)] <- 1; 

	 omega_EVL[2, 1:n_branch_EVL] <- psi_EVL[1,]; 
	 omega_EVL[2, (n_branch_EVL + 1)] <- 0; 

	 omega_EVL[3, 1:n_branch_EVL] <- psi_EVL[2,]; 
	 omega_EVL[3, (n_branch_EVL + 1)] <- 0; 

	 psi_EVU[1, 1:n_branch_EVU] ~ ddirch(EVU_dirch_vec[1,]); 
	 psi_EVU[2, 1:n_branch_EVU] ~ ddirch(EVU_dirch_vec[2,]); 

	 omega_EVU[1, 1:n_branch_EVU] <- zero_vec[1:(n_branch_EVU)]; 
	 omega_EVU[1, (n_branch_EVU + 1)] <- 1; 

	 omega_EVU[2, 1:n_branch_EVU] <- psi_EVU[1,]; 
	 omega_EVU[2, (n_branch_EVU + 1)] <- 0; 

	 omega_EVU[3, 1:n_branch_EVU] <- psi_EVU[2,]; 
	 omega_EVU[3, (n_branch_EVU + 1)] <- 0; 

	 psi_WR1[1, 1:n_branch_WR1] ~ ddirch(WR1_dirch_vec[1,]); 
	 psi_WR1[2, 1:n_branch_WR1] ~ ddirch(WR1_dirch_vec[2,]); 

	 omega_WR1[1, 1:n_branch_WR1] <- zero_vec[1:(n_branch_WR1)]; 
	 omega_WR1[1, (n_branch_WR1 + 1)] <- 1; 

	 omega_WR1[2, 1:n_branch_WR1] <- psi_WR1[1,]; 
	 omega_WR1[2, (n_branch_WR1 + 1)] <- 0; 

	 omega_WR1[3, 1:n_branch_WR1] <- psi_WR1[2,]; 
	 omega_WR1[3, (n_branch_WR1 + 1)] <- 0; 

	 psi_UGR[1, 1:n_branch_UGR] ~ ddirch(UGR_dirch_vec[1,]); 
	 psi_UGR[2, 1:n_branch_UGR] ~ ddirch(UGR_dirch_vec[2,]); 

	 omega_UGR[1, 1:n_branch_UGR] <- zero_vec[1:(n_branch_UGR)]; 
	 omega_UGR[1, (n_branch_UGR + 1)] <- 1; 

	 omega_UGR[2, 1:n_branch_UGR] <- psi_UGR[1,]; 
	 omega_UGR[2, (n_branch_UGR + 1)] <- 0; 

	 omega_UGR[3, 1:n_branch_UGR] <- psi_UGR[2,]; 
	 omega_UGR[3, (n_branch_UGR + 1)] <- 0; 

	 psi_JUL[1, 1:n_branch_JUL] ~ ddirch(JUL_dirch_vec[1,]); 
	 psi_JUL[2, 1:n_branch_JUL] ~ ddirch(JUL_dirch_vec[2,]); 

	 omega_JUL[1, 1:n_branch_JUL] <- zero_vec[1:(n_branch_JUL)]; 
	 omega_JUL[1, (n_branch_JUL + 1)] <- 1; 

	 omega_JUL[2, 1:n_branch_JUL] <- psi_JUL[1,]; 
	 omega_JUL[2, (n_branch_JUL + 1)] <- 0; 

	 omega_JUL[3, 1:n_branch_JUL] <- psi_JUL[2,]; 
	 omega_JUL[3, (n_branch_JUL + 1)] <- 0; 

	 psi_KEN[1, 1:n_branch_KEN] ~ ddirch(KEN_dirch_vec[1,]); 
	 psi_KEN[2, 1:n_branch_KEN] ~ ddirch(KEN_dirch_vec[2,]); 

	 omega_KEN[1, 1:n_branch_KEN] <- zero_vec[1:(n_branch_KEN)]; 
	 omega_KEN[1, (n_branch_KEN + 1)] <- 1; 

	 omega_KEN[2, 1:n_branch_KEN] <- psi_KEN[1,]; 
	 omega_KEN[2, (n_branch_KEN + 1)] <- 0; 

	 omega_KEN[3, 1:n_branch_KEN] <- psi_KEN[2,]; 
	 omega_KEN[3, (n_branch_KEN + 1)] <- 0; 

	 psi_WR2[1, 1:n_branch_WR2] ~ ddirch(WR2_dirch_vec[1,]); 
	 psi_WR2[2, 1:n_branch_WR2] ~ ddirch(WR2_dirch_vec[2,]); 

	 omega_WR2[1, 1:n_branch_WR2] <- zero_vec[1:(n_branch_WR2)]; 
	 omega_WR2[1, (n_branch_WR2 + 1)] <- 1; 

	 omega_WR2[2, 1:n_branch_WR2] <- psi_WR2[1,]; 
	 omega_WR2[2, (n_branch_WR2 + 1)] <- 0; 

	 omega_WR2[3, 1:n_branch_WR2] <- psi_WR2[2,]; 
	 omega_WR2[3, (n_branch_WR2 + 1)] <- 0; 

	 phi_KRS[1] ~ dbeta(1, 1); 
	 phi_KRS[2] ~ dbeta(1, 1); 

	 phi_SC4[1] ~ dbeta(1, 1); 
	 phi_SC4[2] ~ dbeta(1, 1); 

	 psi_IR3[1, 1:n_branch_IR3] ~ ddirch(IR3_dirch_vec[1,]); 
	 psi_IR3[2, 1:n_branch_IR3] ~ ddirch(IR3_dirch_vec[2,]); 

	 omega_IR3[1, 1:n_branch_IR3] <- zero_vec[1:(n_branch_IR3)]; 
	 omega_IR3[1, (n_branch_IR3 + 1)] <- 1; 

	 omega_IR3[2, 1:n_branch_IR3] <- psi_IR3[1,]; 
	 omega_IR3[2, (n_branch_IR3 + 1)] <- 0; 

	 omega_IR3[3, 1:n_branch_IR3] <- psi_IR3[2,]; 
	 omega_IR3[3, (n_branch_IR3 + 1)] <- 0; 

	 psi_LRW[1, 1:n_branch_LRW] ~ ddirch(LRW_dirch_vec[1,]); 
	 psi_LRW[2, 1:n_branch_LRW] ~ ddirch(LRW_dirch_vec[2,]); 

	 omega_LRW[1, 1:n_branch_LRW] <- zero_vec[1:(n_branch_LRW)]; 
	 omega_LRW[1, (n_branch_LRW + 1)] <- 1; 

	 omega_LRW[2, 1:n_branch_LRW] <- psi_LRW[1,]; 
	 omega_LRW[2, (n_branch_LRW + 1)] <- 0; 

	 omega_LRW[3, 1:n_branch_LRW] <- psi_LRW[2,]; 
	 omega_LRW[3, (n_branch_LRW + 1)] <- 0; 

	 psi_LAP[1, 1:n_branch_LAP] ~ ddirch(LAP_dirch_vec[1,]); 
	 psi_LAP[2, 1:n_branch_LAP] ~ ddirch(LAP_dirch_vec[2,]); 

	 omega_LAP[1, 1:n_branch_LAP] <- zero_vec[1:(n_branch_LAP)]; 
	 omega_LAP[1, (n_branch_LAP + 1)] <- 1; 

	 omega_LAP[2, 1:n_branch_LAP] <- psi_LAP[1,]; 
	 omega_LAP[2, (n_branch_LAP + 1)] <- 0; 

	 omega_LAP[3, 1:n_branch_LAP] <- psi_LAP[2,]; 
	 omega_LAP[3, (n_branch_LAP + 1)] <- 0; 

	 phi_LC1[1] ~ dbeta(1, 1); 
	 phi_LC1[2] ~ dbeta(1, 1); 

	 psi_ESS[1, 1:n_branch_ESS] ~ ddirch(ESS_dirch_vec[1,]); 
	 psi_ESS[2, 1:n_branch_ESS] ~ ddirch(ESS_dirch_vec[2,]); 

	 omega_ESS[1, 1:n_branch_ESS] <- zero_vec[1:(n_branch_ESS)]; 
	 omega_ESS[1, (n_branch_ESS + 1)] <- 1; 

	 omega_ESS[2, 1:n_branch_ESS] <- psi_ESS[1,]; 
	 omega_ESS[2, (n_branch_ESS + 1)] <- 0; 

	 omega_ESS[3, 1:n_branch_ESS] <- psi_ESS[2,]; 
	 omega_ESS[3, (n_branch_ESS + 1)] <- 0; 

	 phi_ACM[1] ~ dbeta(1, 1); 
	 phi_ACM[2] ~ dbeta(1, 1); 

	 phi_LSC[1] ~ dbeta(1, 1); 
	 phi_LSC[2] ~ dbeta(1, 1); 

	 phi_UGS[1] ~ dbeta(1, 1); 
	 phi_UGS[2] ~ dbeta(1, 1); 

	 phi_HLM[1] ~ dbeta(1, 1); 
	 phi_HLM[2] ~ dbeta(1, 1); 

	 phi_VC2[1] ~ dbeta(1, 1); 
	 phi_VC2[2] ~ dbeta(1, 1); 

	 psi_ACB[1, 1:n_branch_ACB] ~ ddirch(ACB_dirch_vec[1,]); 
	 psi_ACB[2, 1:n_branch_ACB] ~ ddirch(ACB_dirch_vec[2,]); 

	 omega_ACB[1, 1:n_branch_ACB] <- zero_vec[1:(n_branch_ACB)]; 
	 omega_ACB[1, (n_branch_ACB + 1)] <- 1; 

	 omega_ACB[2, 1:n_branch_ACB] <- psi_ACB[1,]; 
	 omega_ACB[2, (n_branch_ACB + 1)] <- 0; 

	 omega_ACB[3, 1:n_branch_ACB] <- psi_ACB[2,]; 
	 omega_ACB[3, (n_branch_ACB + 1)] <- 0; 

	 phi_KHS[1] ~ dbeta(1, 1); 
	 phi_KHS[2] ~ dbeta(1, 1); 

	 phi_BTL[1] ~ dbeta(1, 1); 
	 phi_BTL[2] ~ dbeta(1, 1); 

	 phi_UG3[1] ~ dbeta(1, 1); 
	 phi_UG3[2] ~ dbeta(1, 1); 

	 phi_IR4[1] ~ dbeta(1, 1); 
	 phi_IR4[2] ~ dbeta(1, 1); 

	 phi_IML[1] ~ dbeta(1, 1); 
	 phi_IML[2] ~ dbeta(1, 1); 

	 phi_BTM[1] ~ dbeta(1, 1); 
	 phi_BTM[2] ~ dbeta(1, 1); 

	 phi_SWT[1] ~ dbeta(1, 1); 
	 phi_SWT[2] ~ dbeta(1, 1); 

	 phi_CCU[1] ~ dbeta(1, 1); 
	 phi_CCU[2] ~ dbeta(1, 1); 

	 psi_GRS[1, 1:n_branch_GRS] ~ ddirch(GRS_dirch_vec[1,]); 
	 psi_GRS[2, 1:n_branch_GRS] ~ ddirch(GRS_dirch_vec[2,]); 

	 omega_GRS[1, 1:n_branch_GRS] <- zero_vec[1:(n_branch_GRS)]; 
	 omega_GRS[1, (n_branch_GRS + 1)] <- 1; 

	 omega_GRS[2, 1:n_branch_GRS] <- psi_GRS[1,]; 
	 omega_GRS[2, (n_branch_GRS + 1)] <- 0; 

	 omega_GRS[3, 1:n_branch_GRS] <- psi_GRS[2,]; 
	 omega_GRS[3, (n_branch_GRS + 1)] <- 0; 

	 psi_GOA[1, 1:n_branch_GOA] ~ ddirch(GOA_dirch_vec[1,]); 
	 psi_GOA[2, 1:n_branch_GOA] ~ ddirch(GOA_dirch_vec[2,]); 

	 omega_GOA[1, 1:n_branch_GOA] <- zero_vec[1:(n_branch_GOA)]; 
	 omega_GOA[1, (n_branch_GOA + 1)] <- 1; 

	 omega_GOA[2, 1:n_branch_GOA] <- psi_GOA[1,]; 
	 omega_GOA[2, (n_branch_GOA + 1)] <- 0; 

	 omega_GOA[3, 1:n_branch_GOA] <- psi_GOA[2,]; 
	 omega_GOA[3, (n_branch_GOA + 1)] <- 0; 

	 phi_LTR[1] ~ dbeta(1, 1); 
	 phi_LTR[2] ~ dbeta(1, 1); 

	 phi_MTR[1] ~ dbeta(1, 1); 
	 phi_MTR[2] ~ dbeta(1, 1); 

	 phi_UTR[1] ~ dbeta(1, 1); 
	 phi_UTR[2] ~ dbeta(1, 1); 

	 phi_TFH[1] ~ dbeta(1, 1); 
	 phi_TFH[2] ~ dbeta(1, 1); 

	 phi_LMA[1] ~ dbeta(1, 1); 
	 phi_LMA[2] ~ dbeta(1, 1); 

	 psi_IHR[1, 1:n_branch_IHR] ~ ddirch(IHR_dirch_vec[1,]); 
	 psi_IHR[2, 1:n_branch_IHR] ~ ddirch(IHR_dirch_vec[2,]); 

	 omega_IHR[1, 1:n_branch_IHR] <- zero_vec[1:(n_branch_IHR)]; 
	 omega_IHR[1, (n_branch_IHR + 1)] <- 1; 

	 omega_IHR[2, 1:n_branch_IHR] <- psi_IHR[1,]; 
	 omega_IHR[2, (n_branch_IHR + 1)] <- 0; 

	 omega_IHR[3, 1:n_branch_IHR] <- psi_IHR[2,]; 
	 omega_IHR[3, (n_branch_IHR + 1)] <- 0; 

	 psi_MCN[1, 1:n_branch_MCN] ~ ddirch(MCN_dirch_vec[1,]); 
	 psi_MCN[2, 1:n_branch_MCN] ~ ddirch(MCN_dirch_vec[2,]); 

	 omega_MCN[1, 1:n_branch_MCN] <- zero_vec[1:(n_branch_MCN)]; 
	 omega_MCN[1, (n_branch_MCN + 1)] <- 1; 

	 omega_MCN[2, 1:n_branch_MCN] <- psi_MCN[1,]; 
	 omega_MCN[2, (n_branch_MCN + 1)] <- 0; 

	 omega_MCN[3, 1:n_branch_MCN] <- psi_MCN[2,]; 
	 omega_MCN[3, (n_branch_MCN + 1)] <- 0; 

	 psi_JDA[1, 1:n_branch_JDA] ~ ddirch(JDA_dirch_vec[1,]); 
	 psi_JDA[2, 1:n_branch_JDA] ~ ddirch(JDA_dirch_vec[2,]); 

	 omega_JDA[1, 1:n_branch_JDA] <- zero_vec[1:(n_branch_JDA)]; 
	 omega_JDA[1, (n_branch_JDA + 1)] <- 1; 

	 omega_JDA[2, 1:n_branch_JDA] <- psi_JDA[1,]; 
	 omega_JDA[2, (n_branch_JDA + 1)] <- 0; 

	 omega_JDA[3, 1:n_branch_JDA] <- psi_JDA[2,]; 
	 omega_JDA[3, (n_branch_JDA + 1)] <- 0; 

	 psi_TDA[1, 1:n_branch_TDA] ~ ddirch(TDA_dirch_vec[1,]); 
	 psi_TDA[2, 1:n_branch_TDA] ~ ddirch(TDA_dirch_vec[2,]); 

	 omega_TDA[1, 1:n_branch_TDA] <- zero_vec[1:(n_branch_TDA)]; 
	 omega_TDA[1, (n_branch_TDA + 1)] <- 1; 

	 omega_TDA[2, 1:n_branch_TDA] <- psi_TDA[1,]; 
	 omega_TDA[2, (n_branch_TDA + 1)] <- 0; 

	 omega_TDA[3, 1:n_branch_TDA] <- psi_TDA[2,]; 
	 omega_TDA[3, (n_branch_TDA + 1)] <- 0; 

# Where is each fish? 

	 for(i in 1:n_fish) { 


		 a_LGR[i] ~ dcat( omega_LGR[fish_type[i] + 1, 1:(n_branch_LGR+1), dam_strata[i]] )
			 for (j in 1:n_branch_LGR)	{ 
				 eta_LGR[i,j] <- equals(a_LGR[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_USE[i] ~ dbern(eta_LGR[i, 30] * phi_USE[fish_type[i]]) 

		 a_USI[i] ~ dcat( omega_USI[(eta_USE[i] * fish_type[i] + 1), 1:(n_branch_USI+1)] ) 
			 for (j in 1:n_branch_USI)	{ 
				 eta_USI[i,j] <- equals(a_USI[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_SW1[i] ~ dbern(eta_LGR[i, 26] * phi_SW1[fish_type[i]]) 

		 eta_LRL[i] ~ dbern(eta_LGR[i, 18] * phi_LRL[fish_type[i]]) 

		 eta_SC1[i] ~ dbern(eta_LGR[i, 23] * phi_SC1[fish_type[i]]) 

		 eta_SC2[i] ~ dbern(eta_SC1[i] * phi_SC2[fish_type[i]]) 

		 a_SFG[i] ~ dcat( omega_SFG[(eta_LGR[i,24] * fish_type[i] + 1), 1:(n_branch_SFG+1)] ) 
			 for (j in 1:n_branch_SFG)	{ 
				 eta_SFG[i,j] <- equals(a_SFG[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_LLR[i] ~ dbern(eta_LGR[i, 17] * phi_LLR[fish_type[i]]) 

		 eta_IR1[i] ~ dbern(eta_LGR[i, 9] * phi_IR1[fish_type[i]]) 

		 a_IR2[i] ~ dcat( omega_IR2[(eta_IR1[i] * fish_type[i] + 1), 1:(n_branch_IR2+1)] ) 
			 for (j in 1:n_branch_IR2)	{ 
				 eta_IR2[i,j] <- equals(a_IR2[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_SC3[i] ~ dbern(eta_SC2[i] * phi_SC3[fish_type[i]]) 

		 a_EVL[i] ~ dcat( omega_EVL[(eta_LLR[i] * fish_type[i] + 1), 1:(n_branch_EVL+1)] ) 
			 for (j in 1:n_branch_EVL)	{ 
				 eta_EVL[i,j] <- equals(a_EVL[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_EVU[i] ~ dcat( omega_EVU[(eta_EVL[i,2] * fish_type[i] + 1), 1:(n_branch_EVU+1)] ) 
			 for (j in 1:n_branch_EVU)	{ 
				 eta_EVU[i,j] <- equals(a_EVU[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_WR1[i] ~ dcat( omega_WR1[(eta_LGR[i,33] * fish_type[i] + 1), 1:(n_branch_WR1+1)] ) 
			 for (j in 1:n_branch_WR1)	{ 
				 eta_WR1[i,j] <- equals(a_WR1[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_UGR[i] ~ dcat( omega_UGR[(eta_LGR[i,29] * fish_type[i] + 1), 1:(n_branch_UGR+1)] ) 
			 for (j in 1:n_branch_UGR)	{ 
				 eta_UGR[i,j] <- equals(a_UGR[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_JUL[i] ~ dcat( omega_JUL[(eta_LGR[i,12] * fish_type[i] + 1), 1:(n_branch_JUL+1)] ) 
			 for (j in 1:n_branch_JUL)	{ 
				 eta_JUL[i,j] <- equals(a_JUL[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_KEN[i] ~ dcat( omega_KEN[(eta_EVU[i,2] * fish_type[i] + 1), 1:(n_branch_KEN+1)] ) 
			 for (j in 1:n_branch_KEN)	{ 
				 eta_KEN[i,j] <- equals(a_KEN[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_WR2[i] ~ dcat( omega_WR2[(eta_WR1[i,3] * fish_type[i] + 1), 1:(n_branch_WR2+1)] ) 
			 for (j in 1:n_branch_WR2)	{ 
				 eta_WR2[i,j] <- equals(a_WR2[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_KRS[i] ~ dbern(eta_SFG[i, 2] * phi_KRS[fish_type[i]]) 

		 eta_SC4[i] ~ dbern(eta_SC3[i] * phi_SC4[fish_type[i]]) 

		 a_IR3[i] ~ dcat( omega_IR3[(eta_IR2[i,3] * fish_type[i] + 1), 1:(n_branch_IR3+1)] ) 
			 for (j in 1:n_branch_IR3)	{ 
				 eta_IR3[i,j] <- equals(a_IR3[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_LRW[i] ~ dcat( omega_LRW[(eta_KEN[i,2] * fish_type[i] + 1), 1:(n_branch_LRW+1)] ) 
			 for (j in 1:n_branch_LRW)	{ 
				 eta_LRW[i,j] <- equals(a_LRW[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_LAP[i] ~ dcat( omega_LAP[(eta_LGR[i,13] * fish_type[i] + 1), 1:(n_branch_LAP+1)] ) 
			 for (j in 1:n_branch_LAP)	{ 
				 eta_LAP[i,j] <- equals(a_LAP[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_LC1[i] ~ dbern(eta_LGR[i, 15] * phi_LC1[fish_type[i]]) 

		 a_ESS[i] ~ dcat( omega_ESS[(eta_SFG[i,1] * fish_type[i] + 1), 1:(n_branch_ESS+1)] ) 
			 for (j in 1:n_branch_ESS)	{ 
				 eta_ESS[i,j] <- equals(a_ESS[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_ACM[i] ~ dbern(eta_LGR[i, 1] * phi_ACM[fish_type[i]]) 

		 eta_LSC[i] ~ dbern(eta_IR2[i, 4] * phi_LSC[fish_type[i]]) 

		 eta_UGS[i] ~ dbern(eta_UGR[i, 2] * phi_UGS[fish_type[i]]) 

		 eta_HLM[i] ~ dbern(eta_JUL[i, 1] * phi_HLM[fish_type[i]]) 

		 eta_VC2[i] ~ dbern(eta_USI[i, 5] * phi_VC2[fish_type[i]]) 

		 a_ACB[i] ~ dcat( omega_ACB[(eta_ACM[i] * fish_type[i] + 1), 1:(n_branch_ACB+1)] ) 
			 for (j in 1:n_branch_ACB)	{ 
				 eta_ACB[i,j] <- equals(a_ACB[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_KHS[i] ~ dbern(eta_JUL[i, 2] * phi_KHS[fish_type[i]]) 

		 eta_BTL[i] ~ dbern(eta_LRW[i, 1] * phi_BTL[fish_type[i]]) 

		 eta_UG3[i] ~ dbern(eta_UGS[i] * phi_UG3[fish_type[i]]) 

		 eta_IR4[i] ~ dbern(eta_IR3[i, 3] * phi_IR4[fish_type[i]]) 

		 eta_IML[i] ~ dbern(eta_IR4[i] * phi_IML[fish_type[i]]) 

		 eta_BTM[i] ~ dbern(eta_BTL[i] * phi_BTM[fish_type[i]]) 

		 eta_SWT[i] ~ dbern(eta_LAP[i, 2] * phi_SWT[fish_type[i]]) 

		 eta_CCU[i] ~ dbern(eta_UGR[i, 1] * phi_CCU[fish_type[i]]) 

		 a_GRS[i] ~ dcat( omega_GRS[(eta_LGR[i,8] * fish_type[i] + 1), 1:(n_branch_GRS+1)] ) 
			 for (j in 1:n_branch_GRS)	{ 
				 eta_GRS[i,j] <- equals(a_GRS[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_GOA[i] ~ dcat( omega_GOA[(eta_GRS[i,1] * fish_type[i] + 1), 1:(n_branch_GOA+1)] ) 
			 for (j in 1:n_branch_GOA)	{ 
				 eta_GOA[i,j] <- equals(a_GOA[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_LTR[i] ~ dbern(eta_GOA[i, 2] * phi_LTR[fish_type[i]]) 

		 eta_MTR[i] ~ dbern(eta_LTR[i] * phi_MTR[fish_type[i]]) 

		 eta_UTR[i] ~ dbern(eta_MTR[i] * phi_UTR[fish_type[i]]) 

		 eta_TFH[i] ~ dbern(eta_UTR[i] * phi_TFH[fish_type[i]]) 

		 eta_LMA[i] ~ dbern(eta_GOA[i, 1] * phi_LMA[fish_type[i]]) 

		 a_IHR[i] ~ dcat( omega_IHR[(eta_LMA[i] * fish_type[i] + 1), 1:(n_branch_IHR+1)] ) 
			 for (j in 1:n_branch_IHR)	{ 
				 eta_IHR[i,j] <- equals(a_IHR[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_MCN[i] ~ dcat( omega_MCN[(eta_IHR[i,1] * fish_type[i] + 1), 1:(n_branch_MCN+1)] ) 
			 for (j in 1:n_branch_MCN)	{ 
				 eta_MCN[i,j] <- equals(a_MCN[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_JDA[i] ~ dcat( omega_JDA[(eta_MCN[i,2] * fish_type[i] + 1), 1:(n_branch_JDA+1)] ) 
			 for (j in 1:n_branch_JDA)	{ 
				 eta_JDA[i,j] <- equals(a_JDA[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_TDA[i] ~ dcat( omega_TDA[(eta_JDA[i,2] * fish_type[i] + 1), 1:(n_branch_TDA+1)] ) 
			 for (j in 1:n_branch_TDA)	{ 
				 eta_TDA[i,j] <- equals(a_TDA[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

	} # end the n_fish loop 


# Were tags observed? 

	 for (i in 1:n_fish) {

		 cap_hist[i,2] ~ dbern( ACM_D_p * eta_LGR[i,1] );

		 cap_hist[i,3] ~ dbern( ACM_U_p * eta_LGR[i,1] );

		 cap_hist[i,4] ~ dbern( ACB_D_p * eta_ACM[i] );

		 cap_hist[i,5] ~ dbern( ACB_U_p * eta_ACM[i] );

		 cap_hist[i,6] ~ dbern( AFC_D_p * eta_ACB[i,1] );

		 cap_hist[i,7] ~ dbern( AFC_U_p * eta_ACB[i,1] );

		 cap_hist[i,8] ~ dbern( CCA_D_p * eta_ACB[i,2] );

		 cap_hist[i,9] ~ dbern( CCA_U_p * eta_ACB[i,2] );

		 cap_hist[i,10] ~ dbern( ALPOWC_p * eta_LGR[i,2] );

		 cap_hist[i,11] ~ dbern( BED_D_p * eta_LGR[i,3] );

		 cap_hist[i,12] ~ dbern( BED_U_p * eta_LGR[i,3] );

		 cap_hist[i,13] ~ dbern( BRC_p * eta_LGR[i,4] );

		 cap_hist[i,14] ~ dbern( CLC_D_p * eta_LGR[i,5] );

		 cap_hist[i,15] ~ dbern( CLC_U_p * eta_LGR[i,5] );

		 cap_hist[i,16] ~ dbern( COC_D_p * eta_LGR[i,6] );

		 cap_hist[i,17] ~ dbern( COC_U_p * eta_LGR[i,6] );

		 cap_hist[i,18] ~ dbern( CRC_D_p * eta_LGR[i,7] );

		 cap_hist[i,19] ~ dbern( CRC_U_p * eta_LGR[i,7] );

		 cap_hist[i,20] ~ dbern( GRS_p * eta_LGR[i,8] );

		 cap_hist[i,21] ~ dbern( GOA_p * eta_GRS[i,1] );

		 cap_hist[i,22] ~ dbern( LMA_p * eta_GOA[i,1] );

		 cap_hist[i,23] ~ dbern( IHR_p * eta_LMA[i] );

		 cap_hist[i,24] ~ dbern( MCN_p * eta_IHR[i,1] );

		 cap_hist[i,25] ~ dbern( JD1_p * eta_MCN[i,1] );

		 cap_hist[i,26] ~ dbern( JDA_p * eta_MCN[i,2] );

		 cap_hist[i,27] ~ dbern( DRM_p * eta_JDA[i,1] );

		 cap_hist[i,28] ~ dbern( TDA_p * eta_JDA[i,2] );

		 cap_hist[i,29] ~ dbern( BON_p * eta_TDA[i,1] );

		 cap_hist[i,30] ~ dbern( FID_p * eta_TDA[i,2] );

		 cap_hist[i,31] ~ dbern( KLR_p * eta_TDA[i,3] );

		 cap_hist[i,32] ~ dbern( LWL_p * eta_TDA[i,4] );

		 cap_hist[i,33] ~ dbern( RCX_p * eta_TDA[i,5] );

		 cap_hist[i,34] ~ dbern( WRA_p * eta_TDA[i,6] );

		 cap_hist[i,35] ~ dbern( UMW_p * eta_MCN[i,3] );

		 cap_hist[i,36] ~ dbern( PRA_p * eta_IHR[i,2] );

		 cap_hist[i,37] ~ dbern( PRO_p * eta_IHR[i,3] );

		 cap_hist[i,38] ~ dbern( WWB_p * eta_IHR[i,4] );

		 cap_hist[i,39] ~ dbern( LTR_D_p * eta_GOA[i,2] );

		 cap_hist[i,40] ~ dbern( LTR_U_p * eta_GOA[i,2] );

		 cap_hist[i,41] ~ dbern( MTR_D_p * eta_LTR[i] );

		 cap_hist[i,42] ~ dbern( MTR_U_p * eta_LTR[i] );

		 cap_hist[i,43] ~ dbern( UTR_D_p * eta_MTR[i] );

		 cap_hist[i,44] ~ dbern( UTR_U_p * eta_MTR[i] );

		 cap_hist[i,45] ~ dbern( TFH_D_p * eta_UTR[i] );

		 cap_hist[i,46] ~ dbern( TFH_U_p * eta_UTR[i] );

		 cap_hist[i,47] ~ dbern( TPJ_D_p * eta_TFH[i] );

		 cap_hist[i,48] ~ dbern( TPJ_U_p * eta_TFH[i] );

		 cap_hist[i,49] ~ dbern( PWA_D_p * eta_GRS[i,2] );

		 cap_hist[i,50] ~ dbern( PWA_U_p * eta_GRS[i,2] );

		 cap_hist[i,51] ~ dbern( IR1_p * eta_LGR[i,9] );

		 cap_hist[i,52] ~ dbern( IR2_p * eta_IR1[i] );

		 cap_hist[i,53] ~ dbern( BSC_D_p * eta_IR2[i,1] );

		 cap_hist[i,54] ~ dbern( BSC_U_p * eta_IR2[i,1] );

		 cap_hist[i,55] ~ dbern( CMP_D_p * eta_IR2[i,2] );

		 cap_hist[i,56] ~ dbern( CMP_U_p * eta_IR2[i,2] );

		 cap_hist[i,57] ~ dbern( IR3_D_p * eta_IR2[i,3] );

		 cap_hist[i,58] ~ dbern( IR3_U_p * eta_IR2[i,3] );

		 cap_hist[i,59] ~ dbern( CZY_D_p * eta_IR3[i,1] );

		 cap_hist[i,60] ~ dbern( CZY_U_p * eta_IR3[i,1] );

		 cap_hist[i,61] ~ dbern( GCM_D_p * eta_IR3[i,2] );

		 cap_hist[i,62] ~ dbern( GCM_U_p * eta_IR3[i,2] );

		 cap_hist[i,63] ~ dbern( IR4_D_p * eta_IR3[i,3] );

		 cap_hist[i,64] ~ dbern( IR4_U_p * eta_IR3[i,3] );

		 cap_hist[i,65] ~ dbern( IML_D_p * eta_IR4[i] );

		 cap_hist[i,66] ~ dbern( IML_U_p * eta_IR4[i] );

		 cap_hist[i,67] ~ dbern( IR5_D_p * eta_IML[i] );

		 cap_hist[i,68] ~ dbern( IR5_U_p * eta_IML[i] );

		 cap_hist[i,69] ~ dbern( LSC_D_p * eta_IR2[i,4] );

		 cap_hist[i,70] ~ dbern( LSC_U_p * eta_IR2[i,4] );

		 cap_hist[i,71] ~ dbern( LSHEEF_p * eta_LSC[i] );

		 cap_hist[i,72] ~ dbern( JA1_D_p * eta_LGR[i,10] );

		 cap_hist[i,73] ~ dbern( JA1_U_p * eta_LGR[i,10] );

		 cap_hist[i,74] ~ dbern( JOC_D_p * eta_LGR[i,11] );

		 cap_hist[i,75] ~ dbern( JOC_U_p * eta_LGR[i,11] );

		 cap_hist[i,76] ~ dbern( JUL_p * eta_LGR[i,12] );

		 cap_hist[i,77] ~ dbern( HLM_D_p * eta_JUL[i,1] );

		 cap_hist[i,78] ~ dbern( HLM_U_p * eta_JUL[i,1] );

		 cap_hist[i,79] ~ dbern( EPR_D_p * eta_HLM[i] );

		 cap_hist[i,80] ~ dbern( EPR_U_p * eta_HLM[i] );

		 cap_hist[i,81] ~ dbern( KHS_D_p * eta_JUL[i,2] );

		 cap_hist[i,82] ~ dbern( KHS_U_p * eta_JUL[i,2] );

		 cap_hist[i,83] ~ dbern( BBA_D_p * eta_KHS[i] );

		 cap_hist[i,84] ~ dbern( BBA_U_p * eta_KHS[i] );

		 cap_hist[i,85] ~ dbern( PCM_D_p * eta_JUL[i,3] );

		 cap_hist[i,86] ~ dbern( PCM_U_p * eta_JUL[i,3] );

		 cap_hist[i,87] ~ dbern( LAP_D_p * eta_LGR[i,13] );

		 cap_hist[i,88] ~ dbern( LAP_U_p * eta_LGR[i,13] );

		 cap_hist[i,89] ~ dbern( MIS_D_p * eta_LAP[i,1] );

		 cap_hist[i,90] ~ dbern( MIS_U_p * eta_LAP[i,1] );

		 cap_hist[i,91] ~ dbern( SWT_D_p * eta_LAP[i,2] );

		 cap_hist[i,92] ~ dbern( SWT_U_p * eta_LAP[i,2] );

		 cap_hist[i,93] ~ dbern( WEB_D_p * eta_SWT[i] );

		 cap_hist[i,94] ~ dbern( WEB_U_p * eta_SWT[i] );

		 cap_hist[i,95] ~ dbern( LAW_D_p * eta_LGR[i,14] );

		 cap_hist[i,96] ~ dbern( LAW_U_p * eta_LGR[i,14] );

		 cap_hist[i,97] ~ dbern( LC1_p * eta_LGR[i,15] );

		 cap_hist[i,98] ~ dbern( LC2_p * eta_LC1[i] );

		 cap_hist[i,99] ~ dbern( LGW_D_p * eta_LGR[i,16] );

		 cap_hist[i,100] ~ dbern( LGW_U_p * eta_LGR[i,16] );

		 cap_hist[i,101] ~ dbern( LLR_D_p * eta_LGR[i,17] );

		 cap_hist[i,102] ~ dbern( LLR_U_p * eta_LGR[i,17] );

		 cap_hist[i,103] ~ dbern( EVL_D_p * eta_LLR[i] );

		 cap_hist[i,104] ~ dbern( EVL_U_p * eta_LLR[i] );

		 cap_hist[i,105] ~ dbern( BHC_D_p * eta_EVL[i,1] );

		 cap_hist[i,106] ~ dbern( BHC_U_p * eta_EVL[i,1] );

		 cap_hist[i,107] ~ dbern( EVU_D_p * eta_EVL[i,2] );

		 cap_hist[i,108] ~ dbern( EVU_U_p * eta_EVL[i,2] );

		 cap_hist[i,109] ~ dbern( AGC_D_p * eta_EVU[i,1] );

		 cap_hist[i,110] ~ dbern( AGC_U_p * eta_EVU[i,1] );

		 cap_hist[i,111] ~ dbern( KEN_D_p * eta_EVU[i,2] );

		 cap_hist[i,112] ~ dbern( KEN_U_p * eta_EVU[i,2] );

		 cap_hist[i,113] ~ dbern( HYC_D_p * eta_KEN[i,1] );

		 cap_hist[i,114] ~ dbern( HYC_U_p * eta_KEN[i,1] );

		 cap_hist[i,115] ~ dbern( LRW_D_p * eta_KEN[i,2] );

		 cap_hist[i,116] ~ dbern( LRW_U_p * eta_KEN[i,2] );

		 cap_hist[i,117] ~ dbern( BTL_D_p * eta_LRW[i,1] );

		 cap_hist[i,118] ~ dbern( BTL_U_p * eta_LRW[i,1] );

		 cap_hist[i,119] ~ dbern( BTM_D_p * eta_BTL[i] );

		 cap_hist[i,120] ~ dbern( BTM_U_p * eta_BTL[i] );

		 cap_hist[i,121] ~ dbern( BTU_D_p * eta_BTM[i] );

		 cap_hist[i,122] ~ dbern( BTU_U_p * eta_BTM[i] );

		 cap_hist[i,123] ~ dbern( CAC_D_p * eta_LRW[i,2] );

		 cap_hist[i,124] ~ dbern( CAC_U_p * eta_LRW[i,2] );

		 cap_hist[i,125] ~ dbern( HEC_D_p * eta_LRW[i,3] );

		 cap_hist[i,126] ~ dbern( HEC_U_p * eta_LRW[i,3] );

		 cap_hist[i,127] ~ dbern( LB8_D_p * eta_LRW[i,4] );

		 cap_hist[i,128] ~ dbern( LB8_U_p * eta_LRW[i,4] );

		 cap_hist[i,129] ~ dbern( LBS_D_p * eta_LRW[i,5] );

		 cap_hist[i,130] ~ dbern( LBS_U_p * eta_LRW[i,5] );

		 cap_hist[i,131] ~ dbern( LCL_D_p * eta_LRW[i,6] );

		 cap_hist[i,132] ~ dbern( LCL_U_p * eta_LRW[i,6] );

		 cap_hist[i,133] ~ dbern( LLS_D_p * eta_LRW[i,7] );

		 cap_hist[i,134] ~ dbern( LLS_U_p * eta_LRW[i,7] );

		 cap_hist[i,135] ~ dbern( WPC_D_p * eta_EVU[i,3] );

		 cap_hist[i,136] ~ dbern( WPC_U_p * eta_EVU[i,3] );

		 cap_hist[i,137] ~ dbern( LRL_p * eta_LGR[i,18] );

		 cap_hist[i,138] ~ dbern( LRU_p * eta_LRL[i] );

		 cap_hist[i,139] ~ dbern( MAR_D_p * eta_LGR[i,19] );

		 cap_hist[i,140] ~ dbern( MAR_U_p * eta_LGR[i,19] );

		 cap_hist[i,141] ~ dbern( NFS_D_p * eta_LGR[i,20] );

		 cap_hist[i,142] ~ dbern( NFS_U_p * eta_LGR[i,20] );

		 cap_hist[i,143] ~ dbern( PCA_D_p * eta_LGR[i,21] );

		 cap_hist[i,144] ~ dbern( PCA_U_p * eta_LGR[i,21] );

		 cap_hist[i,145] ~ dbern( RAPH_p * eta_LGR[i,22] );

		 cap_hist[i,146] ~ dbern( SC1_p * eta_LGR[i,23] );

		 cap_hist[i,147] ~ dbern( SC2_p * eta_SC1[i] );

		 cap_hist[i,148] ~ dbern( SC3_p * eta_SC2[i] );

		 cap_hist[i,149] ~ dbern( SC4_D_p * eta_SC3[i] );

		 cap_hist[i,150] ~ dbern( SC4_U_p * eta_SC3[i] );

		 cap_hist[i,151] ~ dbern( CRA_D_p * eta_SC4[i] );

		 cap_hist[i,152] ~ dbern( CRA_U_p * eta_SC4[i] );

		 cap_hist[i,153] ~ dbern( SFG_p * eta_LGR[i,24] );

		 cap_hist[i,154] ~ dbern( ESS_D_p * eta_SFG[i,1] );

		 cap_hist[i,155] ~ dbern( ESS_U_p * eta_SFG[i,1] );

		 cap_hist[i,156] ~ dbern( JOHNSC_p * eta_ESS[i,1] );

		 cap_hist[i,157] ~ dbern( YPP_D_p * eta_ESS[i,2] );

		 cap_hist[i,158] ~ dbern( YPP_U_p * eta_ESS[i,2] );

		 cap_hist[i,159] ~ dbern( KRS_D_p * eta_SFG[i,2] );

		 cap_hist[i,160] ~ dbern( KRS_U_p * eta_SFG[i,2] );

		 cap_hist[i,161] ~ dbern( SALSFW_p * eta_KRS[i] );

		 cap_hist[i,162] ~ dbern( ZEN_D_p * eta_SFG[i,3] );

		 cap_hist[i,163] ~ dbern( ZEN_U_p * eta_SFG[i,3] );

		 cap_hist[i,164] ~ dbern( SIX_D_p * eta_LGR[i,25] );

		 cap_hist[i,165] ~ dbern( SIX_U_p * eta_LGR[i,25] );

		 cap_hist[i,166] ~ dbern( SW1_p * eta_LGR[i,26] );

		 cap_hist[i,167] ~ dbern( SW2_p * eta_SW1[i] );

		 cap_hist[i,168] ~ dbern( TAY_D_p * eta_LGR[i,27] );

		 cap_hist[i,169] ~ dbern( TAY_U_p * eta_LGR[i,27] );

		 cap_hist[i,170] ~ dbern( TENMC2_p * eta_LGR[i,28] );

		 cap_hist[i,171] ~ dbern( UGR_p * eta_LGR[i,29] );

		 cap_hist[i,172] ~ dbern( CCU_D_p * eta_UGR[i,1] );

		 cap_hist[i,173] ~ dbern( CCU_U_p * eta_UGR[i,1] );

		 cap_hist[i,174] ~ dbern( CCW_D_p * eta_CCU[i] );

		 cap_hist[i,175] ~ dbern( CCW_U_p * eta_CCU[i] );

		 cap_hist[i,176] ~ dbern( UGS_D_p * eta_UGR[i,2] );

		 cap_hist[i,177] ~ dbern( UGS_U_p * eta_UGR[i,2] );

		 cap_hist[i,178] ~ dbern( UG3_D_p * eta_UGS[i] );

		 cap_hist[i,179] ~ dbern( UG3_U_p * eta_UGS[i] );

		 cap_hist[i,180] ~ dbern( UG4_D_p * eta_UG3[i] );

		 cap_hist[i,181] ~ dbern( UG4_U_p * eta_UG3[i] );

		 cap_hist[i,182] ~ dbern( USE_p * eta_LGR[i,30] );

		 cap_hist[i,183] ~ dbern( USI_p * eta_USE[i] );

		 cap_hist[i,184] ~ dbern( PAHH_p * eta_USI[i,1] );

		 cap_hist[i,185] ~ dbern( RFL_p * eta_USI[i,2] );

		 cap_hist[i,186] ~ dbern( SALEFT_p * eta_USI[i,3] );

		 cap_hist[i,187] ~ dbern( SAWT_p * eta_USI[i,4] );

		 cap_hist[i,188] ~ dbern( VC2_D_p * eta_USI[i,5] );

		 cap_hist[i,189] ~ dbern( VC2_U_p * eta_USI[i,5] );

		 cap_hist[i,190] ~ dbern( VC1_D_p * eta_VC2[i] );

		 cap_hist[i,191] ~ dbern( VC1_U_p * eta_VC2[i] );

		 cap_hist[i,192] ~ dbern( YFK_D_p * eta_USI[i,6] );

		 cap_hist[i,193] ~ dbern( YFK_U_p * eta_USI[i,6] );

		 cap_hist[i,194] ~ dbern( WB1_D_p * eta_LGR[i,31] );

		 cap_hist[i,195] ~ dbern( WB1_U_p * eta_LGR[i,31] );

		 cap_hist[i,196] ~ dbern( WEN_D_p * eta_LGR[i,32] );

		 cap_hist[i,197] ~ dbern( WEN_U_p * eta_LGR[i,32] );

		 cap_hist[i,198] ~ dbern( WR1_p * eta_LGR[i,33] );

		 cap_hist[i,199] ~ dbern( BCANF_p * eta_WR1[i,1] );

		 cap_hist[i,200] ~ dbern( MR1_D_p * eta_WR1[i,2] );

		 cap_hist[i,201] ~ dbern( MR1_U_p * eta_WR1[i,2] );

		 cap_hist[i,202] ~ dbern( WR2_D_p * eta_WR1[i,3] );

		 cap_hist[i,203] ~ dbern( WR2_U_p * eta_WR1[i,3] );

		 cap_hist[i,204] ~ dbern( LOSTIW_p * eta_WR2[i,1] );

		 cap_hist[i,205] ~ dbern( WALH_p * eta_WR2[i,2] );

	}  # end the n_fish loop 
}
